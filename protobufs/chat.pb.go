// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

/*
Package chatServer is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	User
	Message
	Reply
*/
package chatServer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Message struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	User *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type Reply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "chatServer.User")
	proto.RegisterType((*Message)(nil), "chatServer.Message")
	proto.RegisterType((*Reply)(nil), "chatServer.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	Subscribe(ctx context.Context, in *User, opts ...grpc.CallOption) (Chat_SubscribeClient, error)
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Reply, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Subscribe(ctx context.Context, in *User, opts ...grpc.CallOption) (Chat_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/chatServer.Chat/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_SubscribeClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type chatSubscribeClient struct {
	grpc.ClientStream
}

func (x *chatSubscribeClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/chatServer.Chat/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	Subscribe(*User, Chat_SubscribeServer) error
	SendMessage(context.Context, *Message) (*Reply, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).Subscribe(m, &chatSubscribeServer{stream})
}

type Chat_SubscribeServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type chatSubscribeServer struct {
	grpc.ServerStream
}

func (x *chatSubscribeServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _Chat_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatServer.Chat/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatServer.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Chat_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Chat_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x02, 0xb3, 0x83, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0x94,
	0xa4, 0xb8, 0x58, 0x42, 0x8b, 0x53, 0x8b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x67, 0x2e, 0x76, 0xdf, 0xd4, 0xe2, 0xe2,
	0xc4, 0xf4, 0x54, 0x90, 0x74, 0x49, 0x6a, 0x45, 0x09, 0x4c, 0x1a, 0xc4, 0x16, 0x52, 0xe1, 0x62,
	0x29, 0x2d, 0x4e, 0x2d, 0x92, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x36, 0x12, 0xd0, 0x43, 0x98, 0xaa,
	0x07, 0x32, 0x32, 0x08, 0x2c, 0xab, 0xa4, 0xc8, 0xc5, 0x1a, 0x94, 0x5a, 0x90, 0x53, 0x29, 0x24,
	0xc1, 0xc5, 0x9e, 0x0b, 0x31, 0x0d, 0x6a, 0x0a, 0x8c, 0x6b, 0x54, 0xca, 0xc5, 0xe2, 0x9c, 0x91,
	0x58, 0x22, 0x64, 0xc2, 0xc5, 0x19, 0x5c, 0x9a, 0x54, 0x9c, 0x5c, 0x94, 0x99, 0x94, 0x2a, 0x84,
	0x61, 0x9e, 0x94, 0x20, 0xb2, 0x08, 0xd8, 0x4c, 0x25, 0x06, 0x03, 0x46, 0x21, 0x73, 0x2e, 0xee,
	0xe0, 0xd4, 0xbc, 0x14, 0x98, 0x4b, 0x85, 0x91, 0x55, 0x41, 0x05, 0xb1, 0x6a, 0x75, 0x92, 0xe4,
	0xe2, 0x72, 0x86, 0x8b, 0x3a, 0x71, 0x82, 0xd8, 0x01, 0xa0, 0xf0, 0x09, 0x60, 0x4c, 0x62, 0x03,
	0x07, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x60, 0xd5, 0x31, 0x36, 0x01, 0x00, 0x00,
}
